#!/usr/bin/env coffee

fs   = require "fs"
exec = require("child_process").exec

# 該当箇所の前後でプレビューする行数
previewLines = 3

# エスケープシーケンス列挙
color = ['black', 'red', 'green', 'yellow', 'blue', 'purple', 'cyan', 'gray']

escapeByCode = (str) -> "\x1b[#{str}m"

bg = color.reduce (prev, curr, index) ->
  colorCode = index + 40
  prev[curr] = escapeByCode colorCode
  prev
, {}

fg = color.reduce (prev, curr, index) ->
  colorCode = index + 30
  prev[curr] = escapeByCode colorCode
  prev
, {}

cls = escapeByCode '0'
bold = escapeByCode '1'
underline = escapeByCode '4'
inverse = escapeByCode '7'

endsWithWhiteSpacesPattern = /(\s+$)/
endsWithEmptyRowPattern = /(\s+$)/

highlightWhiteSpaces = (row) ->
  row.replace endsWithWhiteSpacesPattern, "#{inverse}#{underline}$1#{cls}"

appendRowNumber = (row, index) ->
  # 5桁決め打ちでいいのか?
  rowNumber = ('    ' + (index + 1)).slice(-5)
  "#{inverse}#{rowNumber} #{cls} #{row}"

getHighlightRows = (rows, target, start, end) ->
  appendRowNumber highlightWhiteSpaces(row), start + offset for row, offset in rows.slice start, end

getRangeOfNeigborRow = (rows, index, width) ->
  start: Math.max index - width, 0
  end: Math.min index + width, rows.length - 1

getNumbersOfRowEndingWithWhiteSpaces = (rows) ->
  isEndingWithWhiteSpaces = (row) ->
    Boolean(row.match endsWithWhiteSpacesPattern)

  index for row, index in rows when isEndingWithWhiteSpaces(row)

isEndingWithEmptyRows = (content) ->
  Boolean(content.match endsWithEmptyRowPattern)

getWhiteSpacesErrorMessage = (fileName, index) ->
  "#{bg.blue}#{fileName} の #{index + 1} 行目の末尾に余分な空白があります#{cls}"

getEmptyRowErrorMessage = (fileName, index) ->
  "#{bg.purple}#{fileName} の末尾に余分な空行があります#{cls}"

exec 'git diff --cached --name-only', (err, stdoutFromGit, stderr) ->
  fileNames = (fileName for fileName in stdoutFromGit.split('\n') when fileName.length isnt 0)

  (iterate = (output) ->
    fileName = fileNames.shift()

    unless fileName?
      console.log(output.join('\n\n'))
      process.exit Math.min output.length, 1

    fs.readFile fileName, 'utf8', (err, content) ->
      if err?
        console.log '#{bg.red}ファイルの読み込みに失敗しました#{cls}'
        return

      rows = content.split '\n'
      whiteSpacesError = for index in getNumbersOfRowEndingWithWhiteSpaces(rows)
        {start, end} = getRangeOfNeigborRow rows, index, previewLines
        codePreview = getHighlightRows(rows, index, start, end)
        errorMessage = getWhiteSpacesErrorMessage(fileName, index)
        [errorMessage].concat(codePreview).join('\n')

      emptyRowError = if isEndingWithEmptyRows(content)
      then getEmptyRowErrorMessage(fileName)
      else []

      iterate(output.concat(whiteSpacesError).concat(emptyRowError))
  )([])